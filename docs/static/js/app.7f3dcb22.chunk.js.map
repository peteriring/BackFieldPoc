{"version":3,"sources":["hooks/useColorScheme.ts","navigation/LinkingConfiguration.ts","constants/Colors.ts","components/IconButton.tsx","components/SearchBar.tsx","components/SelectDropdown.tsx","components/Themed.tsx","screens/NotFoundScreen.tsx","screens/SettingsScreen.tsx","screens/ListScreen.tsx","navigation/TopTabNavigator.tsx","screens/DetailsScreen.tsx","navigation/RootNavigator.tsx","navigation/Drawer.tsx","navigation/index.tsx","src/serviceWorkerRegistration.js","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","linking","prefixes","Linking","config","screens","Root","RecentList","ListScreen","Settings","Details","NotFound","light","text","background","tint","tabIconDefault","tabIconSelected","dark","IconButton","props","icon","onClick","colorScheme","Pressable","onPress","style","opacity","pressed","FontAwesome","name","size","color","Colors","marginRight","SearchBar","modalVisible","setModalVisibility","useState","search","updateSearch","Modal","animationType","transparent","visible","onRequestClose","View","height","backgroundColor","containerStyle","width","inputStyle","outline","platform","Platform","OS","placeholder","onChangeText","value","flex","SelectDropdown","data","onSelect","selectedItem","index","console","log","buttonTextAfterSelection","rowTextForSelection","item","defaultButtonText","dropdownIconPosition","renderDropdownIcon","buttonStyle","buttonTextStyle","dropdownStyle","borderColor","rowTextStyle","useThemeColor","colorName","theme","colorFromProps","Text","lightColor","darkColor","otherProps","NotFoundScreen","navigation","styles","container","title","TouchableOpacity","replace","link","linkText","StyleSheet","create","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","SettingsScreen","fetchUsers","page","a","async","url","axios","get","response","React","refreshing","setRefreshing","users","setUsers","setPage","then","catch","error","onRefresh","timeout","Promise","resolve","setTimeout","SafeAreaView","FlatList","contentContainerStyle","keyExtractor","user","i","onEndReached","newUsers","fetchMoreUsers","onEndReachedThreshold","refreshControl","RefreshControl","renderItem","navigate","externalPath","Image","resizeMode","minHeight","source","uri","avatar_url","Divider","FeaturedTitle","flexDirection","TopTab","createMaterialTopTabNavigator","TopTabNavigator","Navigator","initialRouteName","screenOptions","tabBarActiveTintColor","tabBarScrollEnabled","Screen","component","options","DetailsScreen","route","params","scalesPageToFit","bounces","javaScriptEnabled","automaticallyAdjustContentInsets","Stack","createNativeStackNavigator","RootNavigator","headerLeft","marginLeft","openDrawer","headerRight","SideNav","createDrawerNavigator","Drawer","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","header","drawerContent","DrawerContentScrollView","DrawerItem","label","openURL","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/app.7f3dcb22.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from \"@react-navigation/native\";\nimport * as Linking from \"expo-linking\";\n\nimport { RootStackParamList } from \"../types\";\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl(\"/\")],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          RecentList: {\n            screens: {\n              ListScreen: \"list\",\n            },\n          },\n        },\n      },\n      Settings: \"settings\",\n      Details: \"details\",\n      NotFound: \"*\",\n    },\n  },\n};\n\nexport default linking;\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, { FunctionComponent } from \"react\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport { Pressable } from \"react-native\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\nimport Colors from \"../constants/Colors\";\r\n\r\nexport interface IIconButtonProps {\r\n  onClick: CallableFunction;\r\n  icon: string;\r\n}\r\n\r\nexport const IconButton: FunctionComponent<IIconButtonProps> = (props) => {\r\n  const { icon, onClick } = props;\r\n  const colorScheme = useColorScheme();\r\n  return (\r\n    <Pressable\r\n      onPress={() => onClick()}\r\n      style={({ pressed }) => ({\r\n        opacity: pressed ? 0.5 : 1,\r\n      })}\r\n    >\r\n      <FontAwesome\r\n        name={icon as any}\r\n        size={25}\r\n        color={Colors[colorScheme].text}\r\n        style={{ marginRight: 15 }}\r\n      />\r\n    </Pressable>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Modal, Platform, Pressable, View } from \"react-native\";\r\nimport { SearchBar as DefaultSearchBar } from \"react-native-elements\";\r\n\r\nexport interface ISearchBarProps {\r\n  modalVisible: boolean;\r\n  setModalVisibility: (modalVisible: boolean) => void;\r\n}\r\n\r\nexport const SearchBar: FunctionComponent<ISearchBarProps> = (props) => {\r\n  const { modalVisible, setModalVisibility } = props;\r\n  const [search, updateSearch] = useState<string>(\"\");\r\n  return (\r\n    <Modal\r\n      animationType=\"fade\"\r\n      transparent={true}\r\n      visible={modalVisible}\r\n      onRequestClose={() => {\r\n        setModalVisibility(!modalVisible);\r\n      }}\r\n    >\r\n      <View style={{ height: \"100%\", backgroundColor: \"rgba(0,0,0,0.5)\" }}>\r\n        <DefaultSearchBar\r\n          containerStyle={{\r\n            width: \"100%\",\r\n          }}\r\n          inputStyle={{ outline: \"none\" } as any}\r\n          platform={Platform.OS === \"ios\" ? \"ios\" : \"android\"}\r\n          placeholder=\"Type Here...\"\r\n          onChangeText={(text: string) => {\r\n            updateSearch(text);\r\n          }}\r\n          value={search}\r\n        />\r\n        <Pressable\r\n          style={{ flex: 1 }}\r\n          onPress={() => setModalVisibility(false)}\r\n        ></Pressable>\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport DefaultSelectDropdown from \"react-native-select-dropdown\";\r\nimport Colors from \"../constants/Colors\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\n\r\nexport interface ISelectDropdownProps {}\r\n\r\nexport const SelectDropdown: FunctionComponent<ISelectDropdownProps> = () => {\r\n  const countries = [\"Egypt\", \"Canada\", \"Australia\", \"Ireland\"];\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <DefaultSelectDropdown\r\n      data={countries}\r\n      onSelect={(selectedItem, index) => {\r\n        console.log(selectedItem, index);\r\n      }}\r\n      buttonTextAfterSelection={(selectedItem, index) => {\r\n        // text represented after item is selected\r\n        // if data array is an array of objects then return selectedItem.property to render after item is selected\r\n        return selectedItem;\r\n      }}\r\n      rowTextForSelection={(item, index) => {\r\n        // text represented for each item in dropdown\r\n        // if data array is an array of objects then return item.property to represent item in dropdown\r\n        return item;\r\n      }}\r\n      defaultButtonText={\"Select country\"}\r\n      dropdownIconPosition={\"right\"}\r\n      renderDropdownIcon={() => {\r\n        return (\r\n          <FontAwesome\r\n            name=\"chevron-down\"\r\n            color={Colors[colorScheme].text}\r\n            size={18}\r\n          />\r\n        );\r\n      }}\r\n      buttonStyle={{\r\n        backgroundColor: \"transparent\",\r\n      }}\r\n      buttonTextStyle={{\r\n        color: Colors[colorScheme].text,\r\n      }}\r\n      dropdownStyle={{\r\n        backgroundColor: Colors[colorScheme].background,\r\n        borderColor: Colors[colorScheme].text,\r\n      }}\r\n      rowTextStyle={{\r\n        color: Colors[colorScheme].text,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport { Text, View } from '../components/Themed';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Text } from \"react-native-elements\";\r\n\r\nexport default function SettingsScreen() {\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Text>I am a placeholder for the settings screen</Text>\r\n    </View>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  FlatList,\r\n  SafeAreaView,\r\n  RefreshControl,\r\n  Pressable,\r\n} from \"react-native\";\r\nimport { Card } from \"react-native-elements\";\r\nimport axios from \"axios\";\r\n\r\nimport { RootTabScreenProps } from \"../types\";\r\n\r\nexport interface IUser {\r\n  id: string;\r\n  avatar_url: string;\r\n  login: string;\r\n}\r\n\r\nconst wait = (timeout: number) => {\r\n  return new Promise((resolve) => setTimeout(resolve, timeout));\r\n};\r\n\r\nconst fetchUsers = async (page: number): Promise<Array<IUser>> => {\r\n  const pageSize = 10;\r\n  const url = `https://api.github.com/users?since=${\r\n    page * pageSize\r\n  }&per_page=${pageSize}`;\r\n  const response = await axios.get(url);\r\n  return response.data;\r\n};\r\n\r\nexport default function ListScreen({\r\n  navigation,\r\n}: RootTabScreenProps<\"RecentList\">) {\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n  const [users, setUsers] = React.useState([] as Array<IUser>);\r\n  const [page, setPage] = React.useState(0);\r\n  const fetchMoreUsers = (page: number) => {\r\n    fetchUsers(page + 1).then((newUsers) => {\r\n      setUsers([...users, ...newUsers]);\r\n      setPage(page + 1);\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    fetchUsers(0)\r\n      .then((users) => {\r\n        setUsers(users);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const onRefresh = React.useCallback(() => {\r\n    setRefreshing(true);\r\n    wait(2000).then(() => {\r\n      fetchUsers(0).then((users) => {\r\n        setPage(0);\r\n        setUsers(users);\r\n        setRefreshing(false);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <FlatList\r\n        contentContainerStyle={{\r\n          backgroundColor: \"#FBFBF8\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: 15,\r\n        }}\r\n        data={users}\r\n        keyExtractor={(user, i) => `${i}`}\r\n        onEndReached={() => fetchMoreUsers(page)}\r\n        onEndReachedThreshold={0.5}\r\n        refreshControl={\r\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\r\n        }\r\n        renderItem={({ item }) => (\r\n          <Pressable\r\n            onPress={() => {\r\n              navigation.navigate(\"Details\", {\r\n                externalPath: \"https://reactnative.dev/\",\r\n              });\r\n            }}\r\n            style={({ pressed }) => ({\r\n              opacity: pressed ? 0.5 : 1,\r\n              width: \"100%\",\r\n            })}\r\n          >\r\n            <Card>\r\n              <Card.Image\r\n                resizeMode=\"cover\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n                containerStyle={{ width: \"100%\", minHeight: 200 }}\r\n                source={{ uri: item.avatar_url }}\r\n              ></Card.Image>\r\n              <Card.Divider />\r\n              <Card.FeaturedTitle style={{ color: \"black\", fontSize: 16 }}>\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\r\n                posuere scelerisque congue.\r\n              </Card.FeaturedTitle>\r\n              <View\r\n                style={{\r\n                  flex: 1,\r\n                  flexDirection: \"row\",\r\n                  justifyContent: \"space-between\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Text style={{ color: \"#aaa\" }}>\r\n                  Time + Tide - 2021. okt. 27\r\n                </Text>\r\n                <Text style={{ color: \"#aaa\" }}>4 870 views</Text>\r\n              </View>\r\n            </Card>\r\n          </Pressable>\r\n        )}\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\nimport { FunctionComponent } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\nimport ListScreen from \"../screens/ListScreen\";\r\nimport { RootTabParamList } from \"../types\";\r\n\r\nconst TopTab = createMaterialTopTabNavigator<RootTabParamList>();\r\n\r\nexport const TopTabNavigator: FunctionComponent = () => {\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <TopTab.Navigator\r\n      initialRouteName=\"RecentList\"\r\n      screenOptions={{\r\n        tabBarActiveTintColor: Colors[colorScheme].tint,\r\n        tabBarScrollEnabled: true,\r\n      }}\r\n    >\r\n      <TopTab.Screen\r\n        name=\"RecentList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Recent\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"TodayList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular today\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"ThisWeekList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular this week\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"ThisMonthList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular this month\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"Videos\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Videos\",\r\n        }}\r\n      />\r\n    </TopTab.Navigator>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { WebView } from \"react-native-webview\";\r\n\r\nexport default function DetailsScreen({ route }: { route: any }) {\r\n  const { externalPath } = route.params;\r\n  return (\r\n    <WebView\r\n      scalesPageToFit={true}\r\n      bounces={true}\r\n      javaScriptEnabled\r\n      style={{ flex: 1, height: \"100%\" }}\r\n      source={{\r\n        uri: externalPath,\r\n      }}\r\n      automaticallyAdjustContentInsets={false}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavigationProp } from \"@react-navigation/core\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { FunctionComponent, useState } from \"react\";\r\nimport { IconButton } from \"../components/IconButton\";\r\nimport { SearchBar } from \"../components/SearchBar\";\r\nimport { SelectDropdown } from \"../components/SelectDropdown\";\r\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\r\nimport SettingsScreen from \"../screens/SettingsScreen\";\r\nimport { RootStackParamList } from \"../types\";\r\nimport { TopTabNavigator } from \"./TopTabNavigator\";\r\nimport DetailsScreen from \"../screens/DetailsScreen\";\r\nimport { View } from \"react-native\";\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nexport interface IRootNavigatorProps {\r\n  navigation: NavigationProp<any> & { openDrawer: CallableFunction };\r\n}\r\n\r\nexport const RootNavigator: FunctionComponent<IRootNavigatorProps> = (\r\n  props\r\n) => {\r\n  const [modalVisible, setModalVisibility] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        modalVisible={modalVisible}\r\n        setModalVisibility={setModalVisibility}\r\n      />\r\n\r\n      <Stack.Navigator>\r\n        <Stack.Screen\r\n          name=\"Root\"\r\n          component={TopTabNavigator}\r\n          options={{\r\n            title: \"\",\r\n            headerLeft: () => (\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: 10,\r\n                }}\r\n              >\r\n                <IconButton\r\n                  onClick={() => props.navigation.openDrawer()}\r\n                  icon=\"bars\"\r\n                />\r\n                <SelectDropdown />\r\n              </View>\r\n            ),\r\n            headerRight: () => (\r\n              <IconButton\r\n                onClick={() => setModalVisibility(true)}\r\n                icon=\"search\"\r\n              />\r\n            ),\r\n          }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"NotFound\"\r\n          component={NotFoundScreen}\r\n          options={{ title: \"Oops!\" }}\r\n        />\r\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\r\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\r\n      </Stack.Navigator>\r\n    </>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { ColorSchemeName, Linking } from \"react-native\";\r\nimport { NavigationProp } from \"@react-navigation/core\";\r\nimport {\r\n  createDrawerNavigator,\r\n  DrawerContentScrollView,\r\n  DrawerItem,\r\n} from \"@react-navigation/drawer\";\r\nimport {\r\n  DarkTheme,\r\n  DefaultTheme,\r\n  NavigationContainer,\r\n} from \"@react-navigation/native\";\r\n\r\nimport LinkingConfiguration from \"./LinkingConfiguration\";\r\nimport { RootNavigator } from \"./RootNavigator\";\r\n\r\nconst SideNav = createDrawerNavigator();\r\n\r\nexport interface IDrawerProps {\r\n  colorScheme: ColorSchemeName;\r\n}\r\n\r\nexport const Drawer: FunctionComponent<IDrawerProps> = ({ colorScheme }) => {\r\n  return (\r\n    <NavigationContainer\r\n      linking={LinkingConfiguration}\r\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\r\n    >\r\n      <SideNav.Navigator\r\n        initialRouteName=\"Drawer\"\r\n        screenOptions={{\r\n          header: () => null,\r\n        }}\r\n        drawerContent={(props) => {\r\n          return (\r\n            <DrawerContentScrollView>\r\n              <DrawerItem\r\n                label=\"Help\"\r\n                onPress={() => Linking.openURL(\"https://mywebsite.com/help\")}\r\n              />\r\n              <DrawerItem\r\n                label=\"Settings\"\r\n                onPress={() => props.navigation.navigate(\"Settings\")}\r\n              />\r\n            </DrawerContentScrollView>\r\n          );\r\n        }}\r\n      >\r\n        <SideNav.Screen name=\"Drawer\" component={RootNavigator} />\r\n      </SideNav.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n","import { Drawer } from \"./Drawer\";\r\n\r\nexport default Drawer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\n\nimport { register } from \"./src/serviceWorkerRegistration\";\n\nregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}