{"version":3,"sources":["hooks/useColorScheme.ts","navigation/LinkingConfiguration.ts","constants/Colors.ts","components/IconButton.tsx","components/SearchBar.tsx","components/SelectDropdown.tsx","components/Themed.tsx","screens/NotFoundScreen.tsx","screens/SettingsScreen.tsx","api/articles/articles.query.ts","screens/ListScreen.tsx","navigation/TopTabNavigator.tsx","screens/DetailsScreen.tsx","navigation/RootNavigator.tsx","api/tags/tags.schema.ts","api/articles/articles.schema.ts","api/users/users.schema.ts","api/client.schema.ts","api/client.ts","constants/Config.ts","api/tags/tags.query.ts","api/tags/tags.mock.ts","api/articles/articles.mock.ts","api/users/users.mock.ts","api/users/users.query.ts","api/client.provider.tsx","navigation/Drawer.tsx","navigation/index.tsx","workers/serviceWorkerRegistration.js","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","linking","prefixes","Linking","config","screens","Root","RecentList","ListScreen","Settings","Details","NotFound","light","text","background","tint","tabIconDefault","tabIconSelected","dark","IconButton","props","icon","onClick","colorScheme","Pressable","onPress","style","opacity","pressed","FontAwesome","name","size","color","Colors","marginRight","SearchBar","modalVisible","setModalVisibility","useState","search","updateSearch","Modal","animationType","transparent","visible","onRequestClose","View","height","backgroundColor","containerStyle","width","inputStyle","outline","platform","Platform","OS","placeholder","onChangeText","value","flex","SelectDropdown","data","onSelect","selectedItem","index","console","log","buttonTextAfterSelection","rowTextForSelection","item","defaultButtonText","dropdownIconPosition","renderDropdownIcon","buttonStyle","buttonTextStyle","dropdownStyle","borderColor","rowTextStyle","useThemeColor","colorName","theme","colorFromProps","Text","lightColor","darkColor","otherProps","NotFoundScreen","navigation","styles","container","title","TouchableOpacity","replace","link","linkText","StyleSheet","create","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","SettingsScreen","GET_ARTICLES","gql","useQuery","variables","offset","limit","notifyOnNetworkStatusChange","fetchMore","SafeAreaView","FlatList","contentContainerStyle","articles","keyExtractor","article","articleId","onEndReached","total","length","onEndReachedThreshold","renderItem","navigate","externalPath","url","Image","resizeMode","minHeight","source","uri","thumbnail","Divider","FeaturedTitle","flexDirection","TopTab","createMaterialTopTabNavigator","TopTabNavigator","Navigator","initialRouteName","screenOptions","tabBarActiveTintColor","tabBarScrollEnabled","Screen","component","options","DetailsScreen","route","params","src","scalesPageToFit","bounces","javaScriptEnabled","automaticallyAdjustContentInsets","Stack","createNativeStackNavigator","RootNavigator","headerLeft","marginLeft","openDrawer","headerRight","typeDefs","TagsSchema","makeExecutableSchema","ArticlesSchema","UsersSchema","schema","mergeSchemas","schemas","schemaLink","SchemaLink","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","merge","existing","incoming","args","merged","slice","start","end","i","createHttpLink","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","connectToDevTools","ApolloLink","from","resolvers","defaultOptions","query","errorPolicy","GET_TAGS","TagMock","Factory","makeFactory","__typename","faker","random","words","tagsQueryMock","request","result","tags","buildList","datatype","uuid","image","avatar","breakingNews","sendSMS","sourceTag","build","sentimentTag","contentTag","date","articlesQueryMock","splice","userQueryMock","user","firstName","lastName","email","phone","phoneNumber","activationCode","word","preferredTags","bookmarkedNews","ClientProvider","useMocks","children","MockedProvider","mocks","ApolloProvider","SideNav","createDrawerNavigator","Drawer","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","header","drawerContent","DrawerContentScrollView","DrawerItem","label","openURL","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","App","isLoadingComplete","React","setLoadingComplete","a","async","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/app.4414e4c4.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from \"@react-navigation/native\";\nimport * as Linking from \"expo-linking\";\n\nimport { RootStackParamList } from \"../types\";\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl(\"/\")],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          RecentList: {\n            screens: {\n              ListScreen: \"list\",\n            },\n          },\n        },\n      },\n      Settings: \"settings\",\n      Details: \"details\",\n      NotFound: \"*\",\n    },\n  },\n};\n\nexport default linking;\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, { FunctionComponent } from \"react\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport { Pressable } from \"react-native\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\nimport Colors from \"../constants/Colors\";\r\n\r\nexport interface IIconButtonProps {\r\n  onClick: CallableFunction;\r\n  icon: string;\r\n}\r\n\r\nexport const IconButton: FunctionComponent<IIconButtonProps> = (props) => {\r\n  const { icon, onClick } = props;\r\n  const colorScheme = useColorScheme();\r\n  return (\r\n    <Pressable\r\n      onPress={() => onClick()}\r\n      style={({ pressed }) => ({\r\n        opacity: pressed ? 0.5 : 1,\r\n      })}\r\n    >\r\n      <FontAwesome\r\n        name={icon as any}\r\n        size={25}\r\n        color={Colors[colorScheme].text}\r\n        style={{ marginRight: 15 }}\r\n      />\r\n    </Pressable>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Modal, Platform, Pressable, View } from \"react-native\";\r\nimport { SearchBar as DefaultSearchBar } from \"react-native-elements\";\r\n\r\nexport interface ISearchBarProps {\r\n  modalVisible: boolean;\r\n  setModalVisibility: (modalVisible: boolean) => void;\r\n}\r\n\r\nexport const SearchBar: FunctionComponent<ISearchBarProps> = (props) => {\r\n  const { modalVisible, setModalVisibility } = props;\r\n  const [search, updateSearch] = useState<string>(\"\");\r\n  return (\r\n    <Modal\r\n      animationType=\"fade\"\r\n      transparent={true}\r\n      visible={modalVisible}\r\n      onRequestClose={() => {\r\n        setModalVisibility(!modalVisible);\r\n      }}\r\n    >\r\n      <View style={{ height: \"100%\", backgroundColor: \"rgba(0,0,0,0.5)\" }}>\r\n        <DefaultSearchBar\r\n          containerStyle={{\r\n            width: \"100%\",\r\n          }}\r\n          inputStyle={{ outline: \"none\" } as any}\r\n          platform={Platform.OS === \"ios\" ? \"ios\" : \"android\"}\r\n          placeholder=\"Type Here...\"\r\n          onChangeText={(text: string) => {\r\n            updateSearch(text);\r\n          }}\r\n          value={search}\r\n        />\r\n        <Pressable\r\n          style={{ flex: 1 }}\r\n          onPress={() => setModalVisibility(false)}\r\n        ></Pressable>\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport DefaultSelectDropdown from \"react-native-select-dropdown\";\r\nimport Colors from \"../constants/Colors\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\n\r\nexport interface ISelectDropdownProps {}\r\n\r\nexport const SelectDropdown: FunctionComponent<ISelectDropdownProps> = () => {\r\n  const countries = [\"Egypt\", \"Canada\", \"Australia\", \"Ireland\"];\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <DefaultSelectDropdown\r\n      data={countries}\r\n      onSelect={(selectedItem, index) => {\r\n        console.log(selectedItem, index);\r\n      }}\r\n      buttonTextAfterSelection={(selectedItem, index) => {\r\n        // text represented after item is selected\r\n        // if data array is an array of objects then return selectedItem.property to render after item is selected\r\n        return selectedItem;\r\n      }}\r\n      rowTextForSelection={(item, index) => {\r\n        // text represented for each item in dropdown\r\n        // if data array is an array of objects then return item.property to represent item in dropdown\r\n        return item;\r\n      }}\r\n      defaultButtonText={\"Select country\"}\r\n      dropdownIconPosition={\"right\"}\r\n      renderDropdownIcon={() => {\r\n        return (\r\n          <FontAwesome\r\n            name=\"chevron-down\"\r\n            color={Colors[colorScheme].text}\r\n            size={18}\r\n          />\r\n        );\r\n      }}\r\n      buttonStyle={{\r\n        backgroundColor: \"transparent\",\r\n      }}\r\n      buttonTextStyle={{\r\n        color: Colors[colorScheme].text,\r\n      }}\r\n      dropdownStyle={{\r\n        backgroundColor: Colors[colorScheme].background,\r\n        borderColor: Colors[colorScheme].text,\r\n      }}\r\n      rowTextStyle={{\r\n        color: Colors[colorScheme].text,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport { Text, View } from '../components/Themed';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Text } from \"react-native-elements\";\r\n\r\nexport default function SettingsScreen() {\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Text>I am a placeholder for the settings screen</Text>\r\n    </View>\r\n  );\r\n}\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ARTICLES = gql`\r\n  query ArticleQuery($offset: Int, $limit: Int) {\r\n    articles(offset: $offset, limit: $limit) {\r\n      articleId\r\n      title\r\n      thumbnail\r\n      breakingNews\r\n      sendSMS\r\n      sourceTag {\r\n        title\r\n        value\r\n      }\r\n      sentimentTag {\r\n        title\r\n        value\r\n      }\r\n      contentTag {\r\n        title\r\n        value\r\n      }\r\n      date\r\n      url\r\n    }\r\n    total\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\nimport { View, Text, FlatList, SafeAreaView, Pressable } from \"react-native\";\r\nimport { Card } from \"react-native-elements\";\r\n\r\nimport { RootTabScreenProps } from \"../types\";\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { IArticleQuery } from \"../api/articles/articles.types\";\r\nimport { GET_ARTICLES } from \"../api/articles/articles.query\";\r\n\r\nexport default function ListScreen({\r\n  navigation,\r\n}: RootTabScreenProps<\"RecentList\">) {\r\n  const { data, fetchMore } = useQuery<IArticleQuery>(GET_ARTICLES, {\r\n    variables: {\r\n      offset: 0,\r\n      limit: 10,\r\n    },\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <FlatList\r\n        contentContainerStyle={{\r\n          backgroundColor: \"#FBFBF8\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: 15,\r\n        }}\r\n        data={data?.articles}\r\n        keyExtractor={(article) => `${article.articleId}`}\r\n        onEndReached={() => {\r\n          if (!data || data.total <= data.articles.length) return;\r\n\r\n          fetchMore({\r\n            variables: {\r\n              offset: data?.articles.length,\r\n              limit: 10,\r\n            },\r\n          });\r\n        }}\r\n        onEndReachedThreshold={0.5}\r\n        renderItem={({ item }) => (\r\n          <Pressable\r\n            onPress={() => {\r\n              navigation.navigate(\"Details\", {\r\n                externalPath: item.url,\r\n              });\r\n            }}\r\n            style={({ pressed }) => ({\r\n              opacity: pressed ? 0.5 : 1,\r\n              width: \"100%\",\r\n            })}\r\n          >\r\n            <Card>\r\n              <Card.Image\r\n                resizeMode=\"cover\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n                containerStyle={{ width: \"100%\", minHeight: 200 }}\r\n                source={{ uri: item.thumbnail }}\r\n              ></Card.Image>\r\n              <Card.Divider />\r\n              <Card.FeaturedTitle style={{ color: \"black\", fontSize: 16 }}>\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\r\n                posuere scelerisque congue.\r\n              </Card.FeaturedTitle>\r\n              <View\r\n                style={{\r\n                  flex: 1,\r\n                  flexDirection: \"row\",\r\n                  justifyContent: \"space-between\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Text style={{ color: \"#aaa\" }}>\r\n                  Time + Tide - 2021. okt. 27\r\n                </Text>\r\n                <Text style={{ color: \"#aaa\" }}>4 870 views</Text>\r\n              </View>\r\n            </Card>\r\n          </Pressable>\r\n        )}\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\nimport { FunctionComponent } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\nimport ListScreen from \"../screens/ListScreen\";\r\nimport { RootTabParamList } from \"../types\";\r\n\r\nconst TopTab = createMaterialTopTabNavigator<RootTabParamList>();\r\n\r\nexport const TopTabNavigator: FunctionComponent = () => {\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <TopTab.Navigator\r\n      initialRouteName=\"RecentList\"\r\n      screenOptions={{\r\n        tabBarActiveTintColor: Colors[colorScheme].tint,\r\n        tabBarScrollEnabled: true,\r\n      }}\r\n    >\r\n      <TopTab.Screen\r\n        name=\"RecentList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Recent\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"TodayList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular today\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"ThisWeekList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular this week\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"ThisMonthList\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Popular this month\",\r\n        }}\r\n      />\r\n      <TopTab.Screen\r\n        name=\"Videos\"\r\n        component={ListScreen}\r\n        options={{\r\n          title: \"Videos\",\r\n        }}\r\n      />\r\n    </TopTab.Navigator>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\nimport { WebView } from \"react-native-webview\";\r\n\r\nexport default function DetailsScreen({ route }: { route: any }) {\r\n  const { externalPath } = route.params;\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      {Platform.OS === \"web\" && (\r\n        <iframe src={externalPath} style={{ flex: 1, height: \"100%\" }}></iframe>\r\n      )}\r\n      {Platform.OS !== \"web\" && (\r\n        <WebView\r\n          scalesPageToFit={true}\r\n          bounces={true}\r\n          javaScriptEnabled\r\n          style={{ flex: 1, height: \"100%\" }}\r\n          source={{\r\n            uri: externalPath,\r\n          }}\r\n          automaticallyAdjustContentInsets={false}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavigationProp } from \"@react-navigation/core\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { FunctionComponent, useState } from \"react\";\r\nimport { IconButton } from \"../components/IconButton\";\r\nimport { SearchBar } from \"../components/SearchBar\";\r\nimport { SelectDropdown } from \"../components/SelectDropdown\";\r\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\r\nimport SettingsScreen from \"../screens/SettingsScreen\";\r\nimport { RootStackParamList } from \"../types\";\r\nimport { TopTabNavigator } from \"./TopTabNavigator\";\r\nimport DetailsScreen from \"../screens/DetailsScreen\";\r\nimport { View } from \"react-native\";\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nexport interface IRootNavigatorProps {\r\n  navigation: NavigationProp<any> & { openDrawer: CallableFunction };\r\n}\r\n\r\nexport const RootNavigator: FunctionComponent<IRootNavigatorProps> = (\r\n  props\r\n) => {\r\n  const [modalVisible, setModalVisibility] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        modalVisible={modalVisible}\r\n        setModalVisibility={setModalVisibility}\r\n      />\r\n\r\n      <Stack.Navigator>\r\n        <Stack.Screen\r\n          name=\"Root\"\r\n          component={TopTabNavigator}\r\n          options={{\r\n            title: \"\",\r\n            headerLeft: () => (\r\n              <View\r\n                style={{\r\n                  flexDirection: \"row\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: 10,\r\n                }}\r\n              >\r\n                <IconButton\r\n                  onClick={() => props.navigation.openDrawer()}\r\n                  icon=\"bars\"\r\n                />\r\n                <SelectDropdown />\r\n              </View>\r\n            ),\r\n            headerRight: () => (\r\n              <IconButton\r\n                onClick={() => setModalVisibility(true)}\r\n                icon=\"search\"\r\n              />\r\n            ),\r\n          }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"NotFound\"\r\n          component={NotFoundScreen}\r\n          options={{ title: \"Oops!\" }}\r\n        />\r\n        <Stack.Screen name=\"Settings\" component={SettingsScreen} />\r\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\r\n      </Stack.Navigator>\r\n    </>\r\n  );\r\n};\r\n","import { makeExecutableSchema } from \"@graphql-tools/schema\";\r\n\r\nimport gql from \"graphql-tag\";\r\n\r\nexport const typeDefs = gql`\r\n  type TagQuery {\r\n    tags: [Tag!]!\r\n  }\r\n\r\n  type Tag {\r\n    title: String!\r\n    value: String!\r\n  }\r\n`;\r\n\r\nexport const TagsSchema = makeExecutableSchema({ typeDefs });\r\n","import { makeExecutableSchema } from \"@graphql-tools/schema\";\r\n\r\nimport gql from \"graphql-tag\";\r\n\r\nconst typeDefs = gql`\r\n  type ArticleQuery {\r\n    articles: [Article!]!\r\n    total: Int!\r\n  }\r\n\r\n  type Tag {\r\n    title: String!\r\n    value: String!\r\n  }\r\n\r\n  type Article {\r\n    articleId: ID!\r\n    title: String!\r\n    thumbnail: String!\r\n    breakingNews: Boolean!\r\n    sendSMS: Boolean!\r\n    sourceTag: Tag!\r\n    sentimentTag: Tag!\r\n    contentTag: [Tag!]!\r\n    date: String!\r\n    url: String!\r\n  }\r\n`;\r\n\r\nexport const ArticlesSchema = makeExecutableSchema({ typeDefs });\r\n","import { makeExecutableSchema } from \"@graphql-tools/schema\";\r\n\r\nimport gql from \"graphql-tag\";\r\n\r\nconst typeDefs = gql`\r\n  type UserQuery {\r\n    user: User!\r\n  }\r\n\r\n  type Tag {\r\n    title: String!\r\n    value: String!\r\n  }\r\n\r\n  type User {\r\n    name: String!\r\n    email: String!\r\n    phone: String!\r\n    activationCode: String!\r\n    preferredTags: [Tag!]!\r\n    bookmarkedNews: [String!]!\r\n    title: String!\r\n    value: String!\r\n  }\r\n`;\r\n\r\nexport const UsersSchema = makeExecutableSchema({ typeDefs });\r\n","import { ApolloLink } from \"@apollo/client\";\r\nimport { SchemaLink } from \"@apollo/client/link/schema\";\r\nimport { mergeSchemas } from \"@graphql-tools/schema\";\r\nimport { TagsSchema } from \"./tags/tags.schema\";\r\nimport { ArticlesSchema } from \"./articles/articles.schema\";\r\nimport { UsersSchema } from \"./users/users.schema\";\r\n\r\nconst schema = mergeSchemas({\r\n  schemas: [TagsSchema, ArticlesSchema, UsersSchema],\r\n});\r\n\r\nexport const schemaLink = new SchemaLink({ schema }) as ApolloLink;\r\n","import {\r\n  ApolloClient,\r\n  ApolloLink,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { apiUrl } from \"../constants/Config\";\r\nimport { schemaLink } from \"./client.schema\";\r\n\r\nexport const cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        articles: {\r\n          // extracted from '@apollo/client/utilities'\r\n          keyArgs: false,\r\n          merge(existing, incoming, { args }) {\r\n            const merged = existing ? existing.slice(0) : [];\r\n            const start = args ? args.offset : merged.length;\r\n            const end = start + incoming.length;\r\n            for (let i = start; i < end; ++i) {\r\n              merged[i] = incoming[i - start];\r\n            }\r\n            return merged;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst link = createHttpLink({ uri: apiUrl });\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n  connectToDevTools: true,\r\n  link: ApolloLink.from([authLink, schemaLink, link]),\r\n  cache,\r\n  resolvers: {},\r\n  defaultOptions: {\r\n    query: {\r\n      errorPolicy: \"all\",\r\n    },\r\n  },\r\n});\r\n","export const apiUrl = \"http://www.example.com/\";\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_TAGS = gql`\r\n  query getTags {\r\n    tags {\r\n      title\r\n      value\r\n    }\r\n  }\r\n`;\r\n","import * as Factory from \"factory.ts\";\r\nimport faker from \"faker\";\r\nimport { ITag, ITagsQuery } from \"./tags.types\";\r\nimport { MockedResponse } from \"@apollo/client/testing\";\r\nimport { GET_TAGS } from \"./tags.query\";\r\n\r\nexport const TagMock = Factory.Sync.makeFactory<ITag>({\r\n  __typename: \"Tag\",\r\n  title: Factory.each(() => faker.random.words()),\r\n  value: Factory.each(() => faker.random.words()),\r\n});\r\n\r\nexport const tagsQueryMock: Array<MockedResponse<ITagsQuery>> = [\r\n  {\r\n    request: {\r\n      query: GET_TAGS,\r\n    },\r\n    result: {\r\n      data: {\r\n        tags: TagMock.buildList(10),\r\n      },\r\n    },\r\n  },\r\n];\r\n","import * as Factory from \"factory.ts\";\r\nimport faker from \"faker\";\r\nimport { IArticle, IArticleQuery } from \"./articles.types\";\r\nimport { MockedResponse } from \"@apollo/client/testing\";\r\nimport { GET_ARTICLES } from \"./articles.query\";\r\nimport { TagMock } from \"../tags/tags.mock\";\r\n\r\nexport const ArticleMock = Factory.Sync.makeFactory<IArticle>({\r\n  __typename: \"Article\",\r\n  articleId: Factory.each(() => faker.datatype.uuid()),\r\n  title: Factory.each(() => faker.random.words()),\r\n  thumbnail: Factory.each(() => faker.image.avatar()),\r\n  breakingNews: false,\r\n  sendSMS: false,\r\n  sourceTag: Factory.each(() => TagMock.build()),\r\n  sentimentTag: Factory.each(() => TagMock.build()),\r\n  contentTag: Factory.each(() => TagMock.buildList(3)),\r\n  date: Factory.each(() => faker.random.words()),\r\n  url: Factory.each(() => faker.random.words()),\r\n});\r\n\r\nconst articles = ArticleMock.buildList(30);\r\n\r\nexport const articlesQueryMock: Array<MockedResponse<IArticleQuery>> = [\r\n  {\r\n    request: {\r\n      query: GET_ARTICLES,\r\n      variables: {\r\n        offset: 0,\r\n        limit: 10,\r\n      },\r\n    },\r\n    result: {\r\n      data: {\r\n        __typename: \"ArticleQuery\",\r\n        total: articles.length,\r\n        articles: [...articles].splice(0, 10),\r\n      },\r\n    },\r\n  },\r\n  {\r\n    request: {\r\n      query: GET_ARTICLES,\r\n      variables: {\r\n        offset: 10,\r\n        limit: 10,\r\n      },\r\n    },\r\n    result: {\r\n      data: {\r\n        __typename: \"ArticleQuery\",\r\n        total: articles.length,\r\n        articles: [...articles].splice(10, 10),\r\n      },\r\n    },\r\n  },\r\n  {\r\n    request: {\r\n      query: GET_ARTICLES,\r\n      variables: {\r\n        offset: 20,\r\n        limit: 10,\r\n      },\r\n    },\r\n    result: {\r\n      data: {\r\n        __typename: \"ArticleQuery\",\r\n        total: articles.length,\r\n        articles: [...articles].splice(20, 10),\r\n      },\r\n    },\r\n  },\r\n];\r\n","import * as Factory from \"factory.ts\";\r\nimport faker from \"faker\";\r\nimport { IUser, IUserQuery } from \"./users.types\";\r\nimport { MockedResponse } from \"@apollo/client/testing\";\r\nimport { GET_USER } from \"./users.query\";\r\nimport { TagMock } from \"../tags/tags.mock\";\r\n\r\nexport const UserMock = Factory.Sync.makeFactory<IUser>({\r\n  name: Factory.each(\r\n    () => `${faker.name.firstName()} ${faker.name.lastName()}`\r\n  ),\r\n  email: Factory.each(() => faker.random.words()),\r\n  phone: Factory.each(() => faker.phone.phoneNumber()),\r\n  activationCode: Factory.each(() => faker.random.word()),\r\n  preferredTags: Factory.each(() => TagMock.buildList(3)),\r\n  bookmarkedNews: [],\r\n});\r\n\r\nexport const userQueryMock: Array<MockedResponse<IUserQuery>> = [\r\n  {\r\n    request: {\r\n      query: GET_USER,\r\n    },\r\n    result: {\r\n      data: {\r\n        user: UserMock.build(),\r\n      },\r\n    },\r\n  },\r\n];\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_USER = gql`\r\n  query getUser {\r\n    user {\r\n      name\r\n      email\r\n      phone\r\n      activationCode\r\n      preferredTags {\r\n        title\r\n        value\r\n      }\r\n      bookmarkedNews\r\n    }\r\n  }\r\n`;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { MockedProvider } from \"@apollo/client/testing\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { client, cache } from \"./client\";\r\nimport { articlesQueryMock } from \"./articles/articles.mock\";\r\nimport { tagsQueryMock } from \"./tags/tags.mock\";\r\nimport { userQueryMock } from \"./users/users.mock\";\r\n\r\ninterface ProviderProps {\r\n  useMocks?: boolean;\r\n}\r\n\r\nexport const ClientProvider: FunctionComponent<ProviderProps> = ({\r\n  useMocks,\r\n  children,\r\n}) => {\r\n  if (useMocks)\r\n    return (\r\n      <MockedProvider\r\n        mocks={[...articlesQueryMock, ...tagsQueryMock, ...userQueryMock]}\r\n        cache={cache}\r\n      >\r\n        <>{children}</>\r\n      </MockedProvider>\r\n    );\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <>{children}</>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { ColorSchemeName, Linking } from \"react-native\";\r\nimport {\r\n  createDrawerNavigator,\r\n  DrawerContentScrollView,\r\n  DrawerItem,\r\n} from \"@react-navigation/drawer\";\r\nimport {\r\n  DarkTheme,\r\n  DefaultTheme,\r\n  NavigationContainer,\r\n} from \"@react-navigation/native\";\r\n\r\nimport LinkingConfiguration from \"./LinkingConfiguration\";\r\nimport { RootNavigator } from \"./RootNavigator\";\r\nimport { ClientProvider } from \"../api\";\r\n\r\nconst SideNav = createDrawerNavigator();\r\n\r\nexport interface IDrawerProps {\r\n  colorScheme: ColorSchemeName;\r\n}\r\n\r\nexport const Drawer: FunctionComponent<IDrawerProps> = ({ colorScheme }) => {\r\n  return (\r\n    <ClientProvider useMocks>\r\n      <NavigationContainer\r\n        linking={LinkingConfiguration}\r\n        theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\r\n      >\r\n        <SideNav.Navigator\r\n          initialRouteName=\"Drawer\"\r\n          screenOptions={{\r\n            header: () => null,\r\n          }}\r\n          drawerContent={(props) => {\r\n            return (\r\n              <DrawerContentScrollView>\r\n                <DrawerItem\r\n                  label=\"Help\"\r\n                  onPress={() => Linking.openURL(\"https://mywebsite.com/help\")}\r\n                />\r\n                <DrawerItem\r\n                  label=\"Settings\"\r\n                  onPress={() => props.navigation.navigate(\"Settings\")}\r\n                />\r\n              </DrawerContentScrollView>\r\n            );\r\n          }}\r\n        >\r\n          <SideNav.Screen name=\"Drawer\" component={RootNavigator} />\r\n        </SideNav.Navigator>\r\n      </NavigationContainer>\r\n    </ClientProvider>\r\n  );\r\n};\r\n","import { Drawer } from \"./Drawer\";\r\n\r\nexport default Drawer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport { register } from \"./workers/serviceWorkerRegistration\";\n\nregister();\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}